
package purchase_order_management_system_.pom;

import java.util.ArrayList;

public class Supplier extends System_Common_Function {
    // Private member variables to store supplier information
    private String code = "";
    private String name = "";
    private String person_in_charge = "";
    private String contact = "";
    private String address = "";
    
    // Initialize a File_Management object to work with a file named "supplier.txt"
    File_Management obj1 = new File_Management("supplier.txt");
    ArrayList<String> items = obj1.read_file();
    
    
    
    
    
    
    
    
    
    
    
    // Method to view all suppliers
    public ArrayList view() {
        // Display suppliers and return a list of supplier index and codes
        ArrayList<String[]> index_code = super.view_supplier();
        return index_code;
    }
    
    
    
    
    
    
    
    
    
    
    
    // Method to view details of a specific supplier
    public void detail(String position, int command, ArrayList<String[]> indexWITHcode) {
        // Display supplier details using a parent method
        super.supp_detail(position, command, indexWITHcode);
    }
    
    
    
    
    
    
    
    
    
    
    
    // Method to add a new supplier
    public void add() {
        boolean add = true;
        while (add == true) {
            File_Management obj2 = new File_Management("supplier.txt");
            ArrayList<String> supp = obj2.read_file();
            
            // Automatically generate a supplier code
            this.code = System_Common_Function.auto_generate_code(1, "S", "supplier.txt");
            
            // Display options to input supplier details
            System.out.println("\n-------------------------------------------------------------------------------------------------\nAdd new:");
            System.out.println("\n0. Code: " + this.code +
                               "\n1. Name: " + this.name +
                               "\n2. Person in charge: " + this.person_in_charge +
                               "\n3. Contact: " + this.contact +
                               "\n4. Address: " + this.address +
                               "\n0. Item supplied: " + "Add this in the item's interface. System will automatically update all the particular data" +
                               "\n\n5. Save" +
                               "\n6. Cancel ");
            
            // Display instructions to choose an option
            System.out.println("\n\nNote: The code of the supplier will be auto generated by this system based on the code of the last supplier stored in this system" +
                               "\nThe item supplied by this supplier can be modified in the item's interface" +
                               "\nPlease provide the detail of the supplier" +
                               "\nFor example, choose 1 to input the name of the supplier." +
                               "\nNote: The detail of the supplier cannot be the same as the existing one (no duplicated supplier)" +
                               "\nPlease select your choice to input the data: ");
            
            // Read user's command choice
            int command = System_Common_Function.operation(6);
            // Switch statement to handle user's input for different details
            switch (command) {
                case 1:
                    // Input the name of the supplier
                    String item_name = input_data("Please enter the name of the supplier: ");
                    for (String element : items) {
                        String[] element_array = element.split("~");
                        if (item_name.equals(element_array[1])) {
                            System.out.println("\nSorry, the item is already existed.\nPlease try again!");
                            break;
                        } else {
                            this.name = item_name;
                            break;
                        }
                    }
                    break;
                case 2:
                    // Input the person in charge of the supplier
                    this.person_in_charge = System_Common_Function.input_data("Please enter the person in charge of the supplier: ");
                    break;
                case 3:
                    // Input the contact information of the person in charge
                    String contact = System_Common_Function.input_data("Please enter the contact of the person in charge (without -): ");
                    if (isNumeric(contact)) {
                        this.contact = contact;
                    } else {
                        System.out.println("Sorry, here only accept numbers.");
                    }
                    break;
                case 4:
                    // Input the address of the supplier
                    this.address = System_Common_Function.input_data("Please enter the address of the supplier: ");
                    break;
                case 5:
                    // Check if any detail is blank, if not, save the supplier data
                    if (this.code.equals("") || this.name.equals("") || this.person_in_charge.equals("") || this.contact.equals("") || this.address.equals("")) {
                        System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                        System.out.println("Sorry, the detail here cannot be blank.\nPlease provide all the detail!");
                        System.out.println("-------------------------------------------------------------------------------------------------");
                    } else {
                        // Prepare data for writing into the supplier file
                        String ready_write_into_file = this.code + "~" + this.name + "~" + this.person_in_charge + "~" + this.contact + "~" + this.address + "~";
                        obj2.write_file(ready_write_into_file);
                        obj2.write_file("\n");
                        // Display a success message
                        System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                        System.out.println("You have successfully added a supplier!");
                        System.out.println("-------------------------------------------------------------------------------------------------");
                        // Reset supplier details to blank
                        this.code = "";
                        this.name = "";
                        this.person_in_charge = "";
                        this.contact = "";
                        this.address = "";
                    }
                    break;
                case 6:
                    // User choose to cancel the operation
                    add = false;
                    break;
            }
        }
    }
    
    
    
    
    
    
    
    
    
    
    // Method to delete a supplier
    public void delete(ArrayList<String[]> indexWITHcode) {
        boolean delete = true;
        while (delete == true) {
            File_Management obj2 = new File_Management("supplier.txt");
            ArrayList<String> supps = obj2.read_file();
            System.out.println("\n-------------------------------------------------------------------------------------------------\nDelete Item: ");
            System.out.println("\n3. Cancel\nPlease input 3 if you don't wish to delete any supplier or select the index of the supplier that you wish to delete: ");
            int item_to_be_deleted = System_Common_Function.operation(supps.size() + 3);
            if (item_to_be_deleted < 3) {
                System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                System.out.println("Sorry, please select a valid index of the supplier you wish to delete it\n"+
                        "For example: input 4 to delete the first supplier");
                System.out.println("-------------------------------------------------------------------------------------------------");
            } else if (item_to_be_deleted == 3) {
                // User choose to cancel the deletion
                delete = false;
                break;
            } else {
                int position_file = 0;
                // Get the code like "S00001" as we input the index, not the code of the item
                String supp_code = "0";
                for (String[] i : indexWITHcode) {
                    if (item_to_be_deleted == Integer.parseInt(i[0])) {
                        supp_code = i[1];
                    }
                }
                for (String item_name : supps) {
                    String[] item_string = item_name.split("~");
                    if (supp_code.equals(item_string[0])) {
                        // Remove the supplier from the list
                        supps.remove(position_file);
                        break;
                    }
                    position_file = position_file + 1;
                }
                // Rewrite the supplier file after deletion
                obj2.rewrite_file(supps);
                // Display a success message
                System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                System.out.println("You have successfully deleted the supplier!");
                System.out.println("-------------------------------------------------------------------------------------------------");
                // Exit the deletion loop
                delete = false;
                break;
            }
        }
    }
}

