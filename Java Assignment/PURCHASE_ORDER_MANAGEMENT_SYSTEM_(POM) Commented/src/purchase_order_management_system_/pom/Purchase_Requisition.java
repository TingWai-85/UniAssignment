
package purchase_order_management_system_.pom;

import java.util.ArrayList;

public class Purchase_Requisition extends System_Common_Function {

    // Private member variables representing attributes of a purchase requisition
    private String code = "";
    private String date = "";
    private String item = "";
    private String single_price = "";
    private String quantity = "";
    private String total = "";
    private String supplier = "";
    private String sales_manager = "";
    private String arrived_status = "";
    private String approve_status = "";

    // Constructor for initializing a purchase requisition with user-specific details
    public Purchase_Requisition(String user_id){
        this.sales_manager = user_id;
        this.arrived_status = "Unarrived";
        this.approve_status = "Pending";
        this.single_price = "0";
        this.quantity = "0";
        this.total = "0";
    }
    
    
    
    
    
    
    
    
    
    
    // Method to view the list of purchase requisitions
    public ArrayList view() {
        System.out.println("\n-------------------------------------------------------------------------------------------------");
        ArrayList<String[]> index_code = super.view_pr(); // Calls a method from the parent class
        return index_code;
    }
    
    
    
    
    
    
    
    
    
    
    // Method to view the details of a specific purchase requisition
    public void detail(String position, String user_id, int command, ArrayList<String[]> indexWITHcode) {
        super.pr_detail(position, user_id, command, indexWITHcode); // Calls a method from the parent class
    }
    
    
    
    
    
    
    
    
    
    
    public void add(){
        // Initialize boolean variables to control the flow of adding a new Purchase Requisition (PR).    
        boolean add = true; // Controls whether to continue adding PRs.
        boolean new_or_old = true; // Controls whether to order a new item or add stocks to an existing item.
        boolean new_item = true; // Indicates if the user wants to order a completely new item.

        while (new_or_old == true){
            // Display options for ordering a new item or adding stocks to an existing item.
            System.out.println("\n-------------------------------------------------------------------------------------------------");
            System.out.println("Are you wish to order a new item or add some stocks of the existing item?\n"
                + "1. Order a new item\n"
                + "2. Add stock to the existing item");
            // Obtain user's choice (1 or 2) for their selection.        
            int new_old = System_Common_Function.operation(2); 
            if (new_old == 1){
                // User choose to order a new item.        
                new_item = true; // Set the new_item flag to true.
                new_or_old = false; // Exit the loop.
                // Inform the user that the item code will be auto-generated.        
                System.out.println("The code of the item will be auto generated by this system based on the code of the last item stored in this system");
                // Generate a new item code using System_Common_Function.auto_generate_code.
                this.item = System_Common_Function.auto_generate_code(1,"I","item.txt");
                break; // Exit the loop.
            }
            else{
                // User choose to add stocks to an existing item.
                new_item = false; // Set the new_item flag to false.
                new_or_old = false; 
                break; //Exit the loop.
            }
        }
        // Initialize a loop for adding a new Purchase Requisition (PR).
        while (add == true){
            // Create a new instance of File_Management to work with the "PR.txt" file.
            File_Management obj1 = new File_Management("PR.txt");
            // Read the contents of the "PR.txt" file into an ArrayList called items.
            ArrayList<String> items = obj1.read_file();
            // Generate a new PR code using System_Common_Function.auto_generate_code.
            this.code = System_Common_Function.auto_generate_code(2,"PR","PR.txt");
            // Display options and prompts for entering PR details.                       
            System.out.println("\n-------------------------------------------------------------------------------------------------\nAdd new:");
            System.out.println("\n0. Code: " + this.code +
                                "\n1. Issue Date: " + this.date +
                                "\n2. Item: " + this.item +
                                "\n3. Single Price: " + this.single_price +
                                "\n4. Quantity: " + this.quantity + //change to 4
                                "\n0. Total: " + this.total +
                                "\n5. Supplier: " + this.supplier +
                                 "\n0. Sales Manager: " + this.sales_manager +
                                "\n0. Arrive Status:" + this.arrived_status +
                                "\n0. Approve Status: " + this.approve_status +
                                "\n\n6. Save" +
                                "\n7. Cancel ");
            // Provide information to the user about auto-generated PR codes.
            System.out.println("\n\nNote: The code of the Purchase Requisition will be auto generated by this system based on the code of the last PR stored in this system" +
                 "\nPlease provide the detail of the Purchase Requisition" +
                "\nFor example, choose 1 to input the date by when the item is required." +
                "\nNote: The detail of the PR cannot same with the existing one (no dulpicated PR)" +
                "\nPlease select your choice to input the data: ");
            // Obtain the user's choice of operation (1 to 7) for PR details.
            int command = System_Common_Function.operation(7);
            switch (command){
                case 1:
                    // Prompt the user to enter the date of the sales.
                    System.out.println("Format: dd-mm-yyyy");
                    this.date = System_Common_Function.input_data("Please enter the date of the sales: ");
                    break;
                case 2:
                    if (new_item == true){
                        // Inform the user that the item code will be auto-generated based on the last item stored.
                        System.out.println("The code of the item will be auto generated by this system based on the code of the last item stored in this system");
                    }
                    else{
                        String original = this.item;
                        // Prompt the user to input the item's code or check for an existing one.           
                        System.out.println("Please input a correct format of the item's code, for example: I000001");
                        String item_code = System_Common_Function.input_data("Please enter the code of the item: ");
                        File_Management obj100 = new File_Management("item.txt");
                        ArrayList<String> itm = obj100.read_file();
                        for (String element:itm){
                            String[] element_array = element.split("~");
                            if (item_code.equals(element_array[0])){
                                // If the entered item code matches an existing one, set PR details based on that item.            
                                this.item = item_code;
                                this.single_price = element_array[4];
                                double single = Double.parseDouble(this.single_price.substring(3));
                                double item_quantity = Double.parseDouble(this.quantity);
                                double total = single * item_quantity;
                                this.total = String.format("RM %.2f",total);
                                this.supplier = Daily_Sales.item_supplier(this.item);
                            }  
                        }
                       if (this.item.equals(original)){
                            // Inform the user if the item code format is incorrect or not recognized in the system.               
                           System.out.println("\nYour item id's format is incorrect or is not in our system." +
                                   "\nPlease check the existing item id first and input a valid item id that this system recognize");
                        }
                    }
                   break;
                case 3:
                    if (new_item == true){
                        // Prompt the user to enter the price of the item.            
                        String price = System_Common_Function.input_data("Please enter the price of the item (without RM): ");
                        if (super.isNumeric(price)){
                            this.single_price = "RM " + price;
                        }
                        else{
                            // Inform the user that only numbers are accepted for item price.                
                            System.out.println("\nSorry, here only accept number.");
                        }
                    }
                    else{
                        // Inform the user that the single price will be based on the price recorded in the Item text file.                
                        System.out.println("\nThe single price will be based on the price recorded in the Item text file\nPlease has a check on that");
                    }
                    break;
                case 4:
                    // Prompt the user to enter the quantity of the item.
                    String item_quantity = System_Common_Function.input_data("Please enter the quantity of the item: ");
                    if (isNumeric(item_quantity)){
                        // If the entered quantity is numeric, set it and calculate the total price based on the single price and quantity.        
                        this.quantity = item_quantity;
                        double single = Double.parseDouble(this.single_price.substring(3));
                        double item_quantity_in_numeric = Double.parseDouble(this.quantity);
                        double total = single * item_quantity_in_numeric;
                        this.total = String.format("RM %.2f",total);
                    }
                    else{
                        // Inform the user that only numbers are accepted for item quantity.        
                        System.out.println("\nSorry, here only accept number.\n");
                    }
                    break;
                case 5:
                    if (new_item == true){
                        // Inform the user about the correct format for a supplier ID.    
                        System.out.println("Please input a correct format, for example: S000001");
                        String supplier = System_Common_Function.input_data("Please enter the supplier of the item: ");
                        File_Management obj2 = new File_Management("supplier.txt");
                        ArrayList<String> supp = obj2.read_file();
                        for (String element:supp){
                            String[] element_array = element.split("~");
                            if (supplier.equals(element_array[0])){
                                // If the entered supplier ID matches an existing one, set the supplier.            
                                this.supplier = supplier;
                            }  
                        }
                        if (this.supplier.equals("")){
                            // Inform the user if the supplier code format is incorrect or not recognized in the system.            
                            System.out.println("\nYour supplier id's format is incorrect or is not in our system." +
                                    "\nPlease check the existing supplier id first and input a valid supplier id that this system recognize");
                        }
                     }
                    else{
                        // Inform the user that the supplier will be based on the supplier recorded in the Item text file.            
                        System.out.println("\nThe supplier will be based on the supplier recorded in the Item text file\nPlease has a check on that\n");
                    }
                    break;
                case 6:
                    if (this.code.equals("") || this.date.equals("") || this.item.equals("") || this.single_price.equals("") || this.quantity.equals("") || this.total.equals("") || this.supplier.equals("") || this.sales_manager.equals("") || this.arrived_status.equals("") || this.approve_status.equals("")){
                        
                        System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                        System.out.println("Sorry, the detail here cannot be blank.\nPlease provide all the detail!");
                        System.out.println("-------------------------------------------------------------------------------------------------");
                    }
                    else{
                        // Create a string with all the details and write it to the file.
                        String ready_write_into_file = this.code+"~"+this.date+"~"+this.item+"~"+this.single_price+"~"+ this.quantity+"~"
                                                    + this.total+"~"+this.supplier+"~"+this.sales_manager +"~" + this.arrived_status +"~"
                                                    + this.approve_status +"~Unadded~";
                        obj1.write_file(ready_write_into_file);
                        obj1.write_file("\n");

                        // Display a success message and reset the input fields.
                        System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                        System.out.println("You have successfully added a Purchase Requisition!");
                        System.out.println("-------------------------------------------------------------------------------------------------");

                        this.code = "";
                        this.date = "";
                        this.item = "";
                        this.single_price = "";
                        this.quantity = "";
                        this.total = "";
                        this.supplier = "";
                    }
                    break;
                case 7:
                    // Set the 'add' to false to exit the loop and finish adding Purchase Requisitions.
                    add = false;
                    break;
            }
        }
    }

    
    
    
    
    
    
    
    
    
    public void delete(ArrayList<String[]> indexWITHcode){
        boolean delete = true;        
        // Loop to manage Purchase Requisition deletion
        while (delete == true){    
            // Create a File_Management object for 'PR.txt'
            File_Management obj1 = new File_Management("PR.txt");
            // Read the contents of 'PR.txt' into an ArrayList
            ArrayList<String> items = obj1.read_file(); 
            ArrayList<String> original = obj1.read_file();
            // Display a prompt message for Purchase Requisition deletion
            System.out.println("\n-------------------------------------------------------------------------------------------------\nDelete Purchase Requisition: ");
            System.out.println("\n3. Cancel\nPlease input 3 if you don't wish to delete the sale or select the index of the sale that you wish to delete: ");
            // Read the user's input for the item to be deleted
            int item_to_be_deleted = System_Common_Function.operation(items.size()+3);
            // Check if the user's input is valid
            if (item_to_be_deleted < 3){
                // Display an error message for an invalid input
                System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                System.out.println("Sorry, please select a valid index of the Purchase Requisition you wish to delete it\n"+
                        "For example: input 4 to delete the first Purchase Requisition");
                System.out.println("-------------------------------------------------------------------------------------------------");
            }
            else if (item_to_be_deleted == 3){
                // If the user selects '3,' set 'delete' to false to exit the deletion loop
                delete = false;
                break;
            }
            else{
                int position_file = 0;
                //to get the code like "D000001" as we input the index, not the code of the item.
                String code = "0";
                // Loop through the 'indexWITHcode' array to find the corresponding code for deletion
                for (String[] i:indexWITHcode){
                    if (item_to_be_deleted == Integer.parseInt(i[0])){
                        code = i[1];
                    }
                }
                // Loop through the 'items' ArrayList to find and remove the Purchase Requisition with the matching code
                for (String item_name: items){
                    String[] item_string = item_name.split("~");
                    if (code.equals(item_string[0]) && (item_string[9]).equals("Pending")){
                        items.remove(position_file);
                        break; // Exit the loop after removal
                    }
                    position_file = position_file + 1;
                }
                 // Check if 'items' ArrayList is equal to the original ArrayList
                if (items.equals(original)){
                    // If they are equal, it means no Purchase Requisition was deleted
                    System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                    System.out.println("Sorry, you can't delete the approved purchase requisition");
                    System.out.println("-------------------------------------------------------------------------------------------------");
                }
                else{
                    // If a Purchase Requisition was deleted, update the file with the modified 'items' ArrayList
                    obj1.rewrite_file(items);
                    System.out.println("-------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------");
                    System.out.println("You have successfully deleted the Purchase Requisition!");
                    System.out.println("-------------------------------------------------------------------------------------------------");
                    delete = false; 
                    break; // Exit the deletion loop
                }
            } 
        }
        
        
    }
    
}
